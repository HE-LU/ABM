global_yes = Yes
global_no = No
global_ok = Ok
global_error_title = Oops!


welcome_name = Apiary Blueprint Manager
welcome_version = v 1.1.0 dev
welcome_information = Some additional information about the product and development.


connect_header = Connect
connect_type = Please chose method for obtaining apiary blueprint:
connect_message_documentation_url = API name ("http://docs.<a style="color: red">&lt;api_name&gt;</a>.apiary.io/"):
connect_message_documentation_token = Please enter your apiary token:
connect_message_web_url = Please enter URL address of Apiary Blueprint:
connect_message_local_file = Upload file from your computer:
connect_message_error_gson = Gson parsing problem!
connect_message_error_parsing = Error in parsing blueprint!
connect_message_error_web = Could not get valid web file!
connect_message_error_file = Could not read the file!


connect_radio_documentation = Apiary documentation
connect_radio_web_url = Web URL
connect_radio_local_file = Local file


connect_gradle_header = Set up gradle
connect_gradle_message = Please add following dependency to your gradle file:<br /><br />compile 'com.squareup.retrofit:retrofit:1.8.0'
connect_gradle_message_error = Please configure your gradle before proceeding!


main_dialog_message_remove_hidden_header = Remove from hidden node
main_dialog_message_remove_hidden = Really remove this request from hidden node?


configuration_header = Configuration
configuration_button_check = Check
configuration_message_host = Host&nbsp;url:
configuration_message_host_example = For example: http://someapi.endpoint.com/
configuration_message_api_module = Module:
configuration_message_api_interface_red = <a style="color: red">Interface&nbsp;class:</a>
configuration_message_api_interface_green = <a style="color: green">Interface&nbsp;class:</a>
configuration_message_api_interface_note = Note: Name of class where api calls going to be stored.<br />For example: APIRequest
configuration_message_api_manager_note= This is how your APIManager could looks like:
configuration_message_api_manager_note_example = public class APIManager\n\
  {\n\
  \tprivate static final String API_URL = "<API_URL_HERE>";\n\
  \tprivate static RestAdapter restAdapter;\n\n\n\
  \tpublic static <INTERFACE_CLASS> get<INTERFACE_CLASS>()\n\
  \t{\n\
  \t\t<INTERFACE_CLASS> <INTERFACE_CLASS_SMALL> = null;\n\
  \t\ttry\n\
  \t\t{\n\
  \t\t\tif(restAdapter==null)\n\
  \t\t\t{\n\
  \t\t\t\trestAdapter = new RestAdapter.Builder()\n\
  \t\t\t\t\t.setEndpoint(API_URL)\n\
  \t\t\t\t\t.build();\n\
  \t\t\t}\n\
  \t\t\t<INTERFACE_CLASS_SMALL> = restAdapter.create(<INTERFACE_CLASS>.class);\n\
  \t\t}\n\
  \t\tcatch(Exception e)\n\
  \t\t{\n\
  \t\t\te.printStackTrace();\n\
  \t\t}\n\
  \t\treturn <INTERFACE_CLASS_SMALL>;\n\
  \t}\n\
  }


implementation_header_new = New&nbsp;request
implementation_header_modify = Modify&nbsp;request
implementation_message_uri = <a style="color: red">URI:</a>
implementation_message_method = <a style="color: red">Method:</a>
implementation_message_hide = <a style="color: red">Hide&nbsp;this&nbsp;request?</a>
implementation_button_hide = Hide
implementation_message_hide_note = Note: Hidden request won't be checked, validated and will be moved to hidden node, where you can make it visible again.
implementation_message_method_name = <a style="color: red">Method&nbsp;name:</a>
implementation_message_method_name_example = Example: Integer <a style="color: red">getNote</a>(int a, int b);
implementation_message_parameters = <a style="color: red">Required&nbsp;parameters</a>
implementation_message_request = <a style="color: red">Request</a>
implementation_message_request_headers = <a style="color: red">Request&nbsp;headers</a>
implementation_message_response = <a style="color: red">Response</a>
implementation_message_response_headers = <a style="color: red">Response&nbsp;headers</a>
implementation_message_checkbox_async = Asynchronous task
implementation_dialog_message_add_hidden_header = Add to hidden node
implementation_dialog_message_add_hidden = Really add this request to hidden node?
implementation_message_error_method = Method name must be filled!
implementation_message_error_request = All Request fields must be filled!
implementation_message_error_response = All Response fields must be filled!


implementation_second_header_new = Request&nbsp;implementation
implementation_second_category_method_implementation= Method&nbsp;implementation
implementation_second_category_requests_entity = Request&nbsp;entities
implementation_second_category_response_entity = Response&nbsp;entities
implementation_second_button_check = Check
implementation_dialog_check_header = Oops problems found!


removed_header = Request&nbsp;removed
removed_message_uri = <a style="color: red">URI:</a>
removed_message_method = <a style="color: red">Method:</a>
removed_message_method_name = <a style="color: red">Method&nbsp;name:</a>
removed_message_info_note = If this request was removed, you can hide it to completely remove it from appearing in main window. In case this request just changed(URI, Method) you can edit it here.
removed_message_hide = <a style="color: red">Hide&nbsp;this&nbsp;request permanently?</a>
removed_button_hide = Hide
removed_message_hide_note = Note: In case this request was removed, you can permanently hide it. It wont be visible in main window anymore.
removed_dialog_message_add_hidden_header = Hide permanently
removed_dialog_message_add_hidden = Do you really wish to hide this request permanently?
removed_message_uri_edit = <a style="color: red">URI:</a>
removed_message_uri_edit_example = Example: <a style="color: red">/example/note</a>
removed_message_method_edit = <a style="color: red">Method:</a>